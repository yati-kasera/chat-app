name: Development CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Development CI
  backend-dev:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Run backend tests
      working-directory: ./backend
      run: npm run test
      env:
        MONGODB_URI: mongodb://localhost:27017/test

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend Docker image (dev)
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-latest
        cache-from: type=gha
        # cache-to: type=gha,mode=max

  # Frontend Development CI
  frontend-dev:
    runs-on: ubuntu-latest
    needs: backend-dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend Docker image (dev)
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-latest
        cache-from: type=gha
        # cache-to: type=gha,mode=max

  # Development Environment Summary
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [backend-dev, frontend-dev]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Deployment Summary
      run: |
        echo "ðŸš€ Development CI/CD Pipeline Completed!"
        echo ""
        echo "ðŸ“¦ Docker Images Built:"
        echo "- Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-${{ github.sha }}"
        echo "- Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-${{ github.sha }}"
        echo ""
        echo "ðŸ”— Latest Images:"
        echo "- Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-latest"
        echo "- Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-latest"
        echo ""
        echo "ðŸ“‹ To deploy locally:"
        echo "1. Update docker-compose.yml with the new image tags"
        echo "2. Run: docker-compose pull"
        echo "3. Run: docker-compose up -d"
        echo ""
        echo "âœ… All tests passed and images are ready for development!" 